{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/demiminjarez/store-sales-prediction?scriptVersionId=197859908\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"4f067141","metadata":{"execution":{"iopub.execute_input":"2024-09-23T02:59:56.115939Z","iopub.status.busy":"2024-09-23T02:59:56.115332Z","iopub.status.idle":"2024-09-23T03:00:02.915618Z","shell.execute_reply":"2024-09-23T03:00:02.913985Z"},"id":"2G-PozsB-9e8","papermill":{"duration":6.814505,"end_time":"2024-09-23T03:00:02.919345","exception":false,"start_time":"2024-09-23T02:59:56.10484","status":"completed"},"tags":[]},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from fastai.tabular.all import *\n","import datetime\n"]},{"cell_type":"code","execution_count":2,"id":"9ad00bc9","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:02.939012Z","iopub.status.busy":"2024-09-23T03:00:02.938391Z","iopub.status.idle":"2024-09-23T03:00:06.568505Z","shell.execute_reply":"2024-09-23T03:00:06.566856Z"},"id":"4skh407C_a9X","papermill":{"duration":3.64251,"end_time":"2024-09-23T03:00:06.571617","exception":false,"start_time":"2024-09-23T03:00:02.929107","status":"completed"},"tags":[]},"outputs":[],"source":["# Load datasets\n","holidays = pd.read_csv('/kaggle/input/store-sales-data/holidays_events.csv')\n","oil = pd.read_csv('/kaggle/input/store-sales-data/oil.csv')\n","stores = pd.read_csv('/kaggle/input/store-sales-data/stores.csv')\n","train_data = pd.read_csv('/kaggle/input/store-sales-data/train.csv')\n","test_data = pd.read_csv('/kaggle/input/store-sales-data/test.csv')\n","transactions = pd.read_csv('/kaggle/input/store-sales-data/transactions.csv')\n"]},{"cell_type":"code","execution_count":3,"id":"b87e5b9a","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:06.588591Z","iopub.status.busy":"2024-09-23T03:00:06.588139Z","iopub.status.idle":"2024-09-23T03:00:06.666397Z","shell.execute_reply":"2024-09-23T03:00:06.664755Z"},"id":"XuSGkjKq_kZK","outputId":"56c37512-09bc-47ce-c7f1-ac10fcbee063","papermill":{"duration":0.090183,"end_time":"2024-09-23T03:00:06.66942","exception":false,"start_time":"2024-09-23T03:00:06.579237","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Train Data:\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>sales</th>\n","      <th>onpromotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BABY CARE</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEAUTY</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BEVERAGES</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2013-01-01</td>\n","      <td>1</td>\n","      <td>BOOKS</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   id        date  store_nbr      family  sales  onpromotion\n","0   0  2013-01-01          1  AUTOMOTIVE    0.0            0\n","1   1  2013-01-01          1   BABY CARE    0.0            0\n","2   2  2013-01-01          1      BEAUTY    0.0            0\n","3   3  2013-01-01          1   BEVERAGES    0.0            0\n","4   4  2013-01-01          1       BOOKS    0.0            0"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Test Data:\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>family</th>\n","      <th>onpromotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3000888</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>AUTOMOTIVE</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3000889</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>BABY CARE</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3000890</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>BEAUTY</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3000891</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>BEVERAGES</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3000892</td>\n","      <td>2017-08-16</td>\n","      <td>1</td>\n","      <td>BOOKS</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        id        date  store_nbr      family  onpromotion\n","0  3000888  2017-08-16          1  AUTOMOTIVE            0\n","1  3000889  2017-08-16          1   BABY CARE            0\n","2  3000890  2017-08-16          1      BEAUTY            2\n","3  3000891  2017-08-16          1   BEVERAGES           20\n","4  3000892  2017-08-16          1       BOOKS            0"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Stores Data:\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>store_nbr</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>type</th>\n","      <th>cluster</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Quito</td>\n","      <td>Pichincha</td>\n","      <td>D</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Quito</td>\n","      <td>Pichincha</td>\n","      <td>D</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Quito</td>\n","      <td>Pichincha</td>\n","      <td>D</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Quito</td>\n","      <td>Pichincha</td>\n","      <td>D</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Santo Domingo</td>\n","      <td>Santo Domingo de los Tsachilas</td>\n","      <td>D</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   store_nbr           city                           state type  cluster\n","0          1          Quito                       Pichincha    D       13\n","1          2          Quito                       Pichincha    D       13\n","2          3          Quito                       Pichincha    D        8\n","3          4          Quito                       Pichincha    D        9\n","4          5  Santo Domingo  Santo Domingo de los Tsachilas    D        4"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Oil Data:\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>dcoilwtico</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>93.14</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-03</td>\n","      <td>92.97</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-04</td>\n","      <td>93.12</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-07</td>\n","      <td>93.20</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         date  dcoilwtico\n","0  2013-01-01         NaN\n","1  2013-01-02       93.14\n","2  2013-01-03       92.97\n","3  2013-01-04       93.12\n","4  2013-01-07       93.20"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Holidays and Events Data:\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>type</th>\n","      <th>locale</th>\n","      <th>locale_name</th>\n","      <th>description</th>\n","      <th>transferred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2012-03-02</td>\n","      <td>Holiday</td>\n","      <td>Local</td>\n","      <td>Manta</td>\n","      <td>Fundacion de Manta</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2012-04-01</td>\n","      <td>Holiday</td>\n","      <td>Regional</td>\n","      <td>Cotopaxi</td>\n","      <td>Provincializacion de Cotopaxi</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2012-04-12</td>\n","      <td>Holiday</td>\n","      <td>Local</td>\n","      <td>Cuenca</td>\n","      <td>Fundacion de Cuenca</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2012-04-14</td>\n","      <td>Holiday</td>\n","      <td>Local</td>\n","      <td>Libertad</td>\n","      <td>Cantonizacion de Libertad</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2012-04-21</td>\n","      <td>Holiday</td>\n","      <td>Local</td>\n","      <td>Riobamba</td>\n","      <td>Cantonizacion de Riobamba</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         date     type    locale locale_name                    description  \\\n","0  2012-03-02  Holiday     Local       Manta             Fundacion de Manta   \n","1  2012-04-01  Holiday  Regional    Cotopaxi  Provincializacion de Cotopaxi   \n","2  2012-04-12  Holiday     Local      Cuenca            Fundacion de Cuenca   \n","3  2012-04-14  Holiday     Local    Libertad      Cantonizacion de Libertad   \n","4  2012-04-21  Holiday     Local    Riobamba      Cantonizacion de Riobamba   \n","\n","   transferred  \n","0        False  \n","1        False  \n","2        False  \n","3        False  \n","4        False  "]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","Transactions Data:\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>store_nbr</th>\n","      <th>transactions</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01</td>\n","      <td>25</td>\n","      <td>770</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-02</td>\n","      <td>1</td>\n","      <td>2111</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-02</td>\n","      <td>2</td>\n","      <td>2358</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-02</td>\n","      <td>3</td>\n","      <td>3487</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-01-02</td>\n","      <td>4</td>\n","      <td>1922</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         date  store_nbr  transactions\n","0  2013-01-01         25           770\n","1  2013-01-02          1          2111\n","2  2013-01-02          2          2358\n","3  2013-01-02          3          3487\n","4  2013-01-02          4          1922"]},"metadata":{},"output_type":"display_data"}],"source":["# Display the first few rows of each dataset\n","print(\"Train Data:\")\n","display(train_data.head())\n","\n","print(\"\\nTest Data:\")\n","display(test_data.head())\n","\n","print(\"\\nStores Data:\")\n","display(stores.head())\n","\n","print(\"\\nOil Data:\")\n","display(oil.head())\n","\n","print(\"\\nHolidays and Events Data:\")\n","display(holidays.head())\n","\n","print(\"\\nTransactions Data:\")\n","display(transactions.head())"]},{"cell_type":"code","execution_count":4,"id":"26af6dca","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:06.69011Z","iopub.status.busy":"2024-09-23T03:00:06.689656Z","iopub.status.idle":"2024-09-23T03:00:07.060121Z","shell.execute_reply":"2024-09-23T03:00:07.058859Z"},"id":"F20-oUSK_x6i","papermill":{"duration":0.383912,"end_time":"2024-09-23T03:00:07.063038","exception":false,"start_time":"2024-09-23T03:00:06.679126","status":"completed"},"tags":[]},"outputs":[],"source":["# Convert 'date' columns to datetime\n","train_data['date'] = pd.to_datetime(train_data['date'])\n","test_data['date'] = pd.to_datetime(test_data['date'])\n","oil['date'] = pd.to_datetime(oil['date'])\n","holidays['date'] = pd.to_datetime(holidays['date'])\n","transactions['date'] = pd.to_datetime(transactions['date'])"]},{"cell_type":"code","execution_count":5,"id":"0a52b3ba","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:07.082946Z","iopub.status.busy":"2024-09-23T03:00:07.082337Z","iopub.status.idle":"2024-09-23T03:00:08.148654Z","shell.execute_reply":"2024-09-23T03:00:08.14695Z"},"id":"FTcUIj0oIknz","outputId":"f8d2a797-e410-4f94-f1bb-968f6c3f58ef","papermill":{"duration":1.079369,"end_time":"2024-09-23T03:00:08.151395","exception":false,"start_time":"2024-09-23T03:00:07.072026","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 1000x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Plot training sales data\n","import matplotlib.pyplot as plt\n","import matplotlib.dates as mdates\n","\n","# Line plot of sales over time\n","plt.figure(figsize=(10,6))\n","plt.plot(train_data['date'], train_data['sales'])\n","\n","# Format the x-axis to show fewer date ticks with the format 'YYYY-MM-DD'\n","locator = mdates.AutoDateLocator(minticks=10, maxticks=15)  # Control the number of date ticks\n","formatter = mdates.DateFormatter('%Y-%m-%d')  # Date format 'YYYY-MM-DD'\n","\n","# Set the locator and formatter for the x-axis\n","ax = plt.gca()  # Get the current axis\n","ax.xaxis.set_major_locator(locator)\n","ax.xaxis.set_major_formatter(formatter)\n","\n","# Rotate the x-axis labels for readability\n","plt.xticks(rotation=45)\n","\n","# Add axis labels\n","plt.xlabel('Date')\n","plt.ylabel('Sales')\n","plt.title('Sales Over Time')\n","plt.xticks(rotation=45)\n","\n","# Tight layout for better spacing\n","plt.tight_layout()\n","\n","plt.show()"]},{"cell_type":"code","execution_count":6,"id":"8a2c13bb","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:08.175515Z","iopub.status.busy":"2024-09-23T03:00:08.174884Z","iopub.status.idle":"2024-09-23T03:00:12.207705Z","shell.execute_reply":"2024-09-23T03:00:12.206459Z"},"id":"0WXm6sbRJuoX","papermill":{"duration":4.047849,"end_time":"2024-09-23T03:00:12.210471","exception":false,"start_time":"2024-09-23T03:00:08.162622","status":"completed"},"tags":[]},"outputs":[],"source":["from fastai.tabular.all import *\n","\n","# Define your categorical and continuous variables\n","categorical_features = ['store_nbr', 'family']#, 'city', 'state', 'type', 'cluster']\n","continuous_features = ['onpromotion']#, 'dcoilwtico', 'transactions', 'is_holiday', 'sales_rolling_mean_7', 'sales_rolling_mean_30']\n","\n","# Define your target variable\n","dep_var = 'sales'\n","\n","# Set preprocessing steps\n","procs = [Categorify, FillMissing, Normalize]\n","\n","# Create a Fastai TabularPandas object (it handles train-test split automatically)\n","to = TabularPandas(train_data, procs, categorical_features, continuous_features, y_names=dep_var, splits=RandomSplitter(valid_pct=0.2)(range_of(train_data)))\n","\n","# Create DataLoaders for fast training\n","dls = to.dataloaders(bs=64)\n"]},{"cell_type":"code","execution_count":7,"id":"c02ff80d","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:12.231404Z","iopub.status.busy":"2024-09-23T03:00:12.230937Z","iopub.status.idle":"2024-09-23T03:00:12.291263Z","shell.execute_reply":"2024-09-23T03:00:12.289862Z"},"id":"o464Yue5AN6J","outputId":"48087052-ffe6-4d01-8f92-83996acfb588","papermill":{"duration":0.073723,"end_time":"2024-09-23T03:00:12.293894","exception":false,"start_time":"2024-09-23T03:00:12.220171","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Combined Data Shape: (3000888, 6)\n"]}],"source":["# Add a 'sales' column to test set with NaN values\n","test_data['sales'] = np.nan\n","\n","# Create data structure\n","data = train_data.reset_index(drop=True)\n","\n","print(f\"Combined Data Shape: {data.shape}\")"]},{"cell_type":"code","execution_count":8,"id":"500a8e9f","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:12.315826Z","iopub.status.busy":"2024-09-23T03:00:12.315357Z","iopub.status.idle":"2024-09-23T03:00:14.190091Z","shell.execute_reply":"2024-09-23T03:00:14.188751Z"},"id":"Gj5ZreYhAPxO","papermill":{"duration":1.889485,"end_time":"2024-09-23T03:00:14.193159","exception":false,"start_time":"2024-09-23T03:00:12.303674","status":"completed"},"tags":[]},"outputs":[],"source":["# Merge with stores data\n","data = data.merge(stores, on='store_nbr', how='left')\n","\n","# Merge with oil data\n","data = data.merge(oil, on='date', how='left')\n","\n","# Merge with transactions data\n","data = data.merge(transactions, on=['store_nbr', 'date'], how='left')\n"]},{"cell_type":"code","execution_count":9,"id":"f6e06b69","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:14.215554Z","iopub.status.busy":"2024-09-23T03:00:14.214271Z","iopub.status.idle":"2024-09-23T03:00:14.629465Z","shell.execute_reply":"2024-09-23T03:00:14.628122Z"},"id":"WhoiCCGBAkBv","papermill":{"duration":0.429355,"end_time":"2024-09-23T03:00:14.63218","exception":false,"start_time":"2024-09-23T03:00:14.202825","status":"completed"},"tags":[]},"outputs":[],"source":["# Aggregate holidays/events by date\n","holidays = holidays.copy()\n","\n","# Handle 'transferred' holidays by setting them as normal days\n","holidays = holidays[~holidays['transferred']]\n","\n","# Create a binary feature indicating if a day is a holiday\n","holidays['is_holiday'] = 1\n","\n","# Aggregate to get a single value per date\n","holidays_agg = holidays.groupby('date')['is_holiday'].max().reset_index()\n","\n","# Merge with main data\n","data = data.merge(holidays_agg, on='date', how='left')\n","\n","# Fill NaN with 0 (not a holiday)\n","data['is_holiday'] = data['is_holiday'].fillna(0)\n"]},{"cell_type":"code","execution_count":10,"id":"572dcc1f","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:14.653458Z","iopub.status.busy":"2024-09-23T03:00:14.65299Z","iopub.status.idle":"2024-09-23T03:00:14.659034Z","shell.execute_reply":"2024-09-23T03:00:14.657887Z"},"id":"-bQR-hU2CSJH","outputId":"6e4138bf-1837-466a-9fbb-503f62a622cd","papermill":{"duration":0.019899,"end_time":"2024-09-23T03:00:14.661644","exception":false,"start_time":"2024-09-23T03:00:14.641745","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Index(['id', 'date', 'store_nbr', 'family', 'sales', 'onpromotion', 'city',\n","       'state', 'type', 'cluster', 'dcoilwtico', 'transactions', 'is_holiday'],\n","      dtype='object')\n"]}],"source":["# Check the columns of the merged data\n","print(data.columns)\n"]},{"cell_type":"code","execution_count":11,"id":"39d142cc","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:14.683138Z","iopub.status.busy":"2024-09-23T03:00:14.682231Z","iopub.status.idle":"2024-09-23T03:00:15.261254Z","shell.execute_reply":"2024-09-23T03:00:15.259835Z"},"id":"9MwzCJi8hPk8","papermill":{"duration":0.592528,"end_time":"2024-09-23T03:00:15.263816","exception":false,"start_time":"2024-09-23T03:00:14.671288","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Original Missing Values:\n","id                   0\n","date                 0\n","store_nbr            0\n","family               0\n","sales                0\n","onpromotion          0\n","city                 0\n","state                0\n","type                 0\n","cluster              0\n","dcoilwtico      928422\n","transactions    245784\n","is_holiday           0\n","dtype: int64\n"]}],"source":["# Check for missing values\n","print(\"Original Missing Values:\")\n","print(data.isnull().sum())"]},{"cell_type":"code","execution_count":12,"id":"65654985","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:15.285582Z","iopub.status.busy":"2024-09-23T03:00:15.285075Z","iopub.status.idle":"2024-09-23T03:00:17.475922Z","shell.execute_reply":"2024-09-23T03:00:17.474385Z"},"id":"tM_zod8CAqCl","outputId":"f1fe9fde-5f13-42de-e19b-a410f7718a07","papermill":{"duration":2.205365,"end_time":"2024-09-23T03:00:17.478937","exception":false,"start_time":"2024-09-23T03:00:15.273572","status":"completed"},"tags":[]},"outputs":[],"source":["# Interpolate missing oil prices to fill in missing values\n","data['dcoilwtico'] = data['dcoilwtico'].interpolate(method='linear')\n","\n","# Interpolate missing transactions\n","data['transactions'] = data['transactions'].interpolate(method='linear')\n","\n","# If there are any other missing values, decide on appropriate imputation\n","# For simplicity, let's fill remaining numerical NaNs with 0\n","numerical_cols = data.select_dtypes(include=['float64', 'int64']).columns\n","data[numerical_cols] = data[numerical_cols].fillna(0)\n","\n","# For categorical columns, fill NaNs with 'Unknown'\n","categorical_cols = data.select_dtypes(include=['object']).columns\n","data[categorical_cols] = data[categorical_cols].fillna('Unknown')\n"]},{"cell_type":"code","execution_count":13,"id":"e19f9fc8","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:17.500352Z","iopub.status.busy":"2024-09-23T03:00:17.499893Z","iopub.status.idle":"2024-09-23T03:00:18.090554Z","shell.execute_reply":"2024-09-23T03:00:18.08913Z"},"id":"pxw14Z3ITm16","outputId":"766b17ec-01df-44d7-d4f6-c7ff18295b8c","papermill":{"duration":0.604472,"end_time":"2024-09-23T03:00:18.093277","exception":false,"start_time":"2024-09-23T03:00:17.488805","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Missing Values:\n","id              0\n","date            0\n","store_nbr       0\n","family          0\n","sales           0\n","onpromotion     0\n","city            0\n","state           0\n","type            0\n","cluster         0\n","dcoilwtico      0\n","transactions    0\n","is_holiday      0\n","dtype: int64\n"]}],"source":["# Check for missing values\n","print(\"Missing Values:\")\n","print(data.isnull().sum())"]},{"cell_type":"code","execution_count":14,"id":"e14c3d7a","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:18.118802Z","iopub.status.busy":"2024-09-23T03:00:18.118204Z","iopub.status.idle":"2024-09-23T03:00:18.125918Z","shell.execute_reply":"2024-09-23T03:00:18.124558Z"},"id":"uqmT_yDvCeY1","outputId":"871c488e-39bd-4c1b-f2d9-6c0023deb7ed","papermill":{"duration":0.023971,"end_time":"2024-09-23T03:00:18.128918","exception":false,"start_time":"2024-09-23T03:00:18.104947","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Index(['id', 'date', 'store_nbr', 'family', 'sales', 'onpromotion', 'city',\n","       'state', 'type', 'cluster', 'dcoilwtico', 'transactions', 'is_holiday'],\n","      dtype='object')\n"]}],"source":["# Check the columns of the merged data\n","print(data.columns)"]},{"cell_type":"code","execution_count":15,"id":"cd1ea7b5","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:18.15171Z","iopub.status.busy":"2024-09-23T03:00:18.151227Z","iopub.status.idle":"2024-09-23T03:00:18.788959Z","shell.execute_reply":"2024-09-23T03:00:18.78767Z"},"id":"qBzEaR-SCrRC","papermill":{"duration":0.652922,"end_time":"2024-09-23T03:00:18.791744","exception":false,"start_time":"2024-09-23T03:00:18.138822","status":"completed"},"tags":[]},"outputs":[],"source":["# Extract date features\n","data['year'] = data['date'].dt.year\n","data['month'] = data['date'].dt.month\n","data['day'] = data['date'].dt.day\n","data['day_of_week'] = data['date'].dt.dayofweek\n","data['week_of_year'] = data['date'].dt.isocalendar().week.astype(int)\n","data['is_weekend'] = data['day_of_week'].isin([5, 6]).astype(int)\n"]},{"cell_type":"code","execution_count":16,"id":"328f4d0d","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:18.813551Z","iopub.status.busy":"2024-09-23T03:00:18.813111Z","iopub.status.idle":"2024-09-23T03:00:23.907824Z","shell.execute_reply":"2024-09-23T03:00:23.906355Z"},"id":"zjhKFvEwCuEc","papermill":{"duration":5.108859,"end_time":"2024-09-23T03:00:23.910785","exception":false,"start_time":"2024-09-23T03:00:18.801926","status":"completed"},"tags":[]},"outputs":[],"source":["# Sort data for lag features\n","data = data.sort_values(['store_nbr', 'family', 'date'])\n","\n","# Create lag features (e.g., sales from previous 7 days)\n","for lag in range(1, 8):\n","    data[f'sales_lag_{lag}'] = data.groupby(['store_nbr', 'family'])['sales'].shift(lag)\n","\n","# Create rolling mean features\n","data['sales_rolling_mean_7'] = data.groupby(['store_nbr', 'family'])['sales'].shift(1).rolling(window=7).mean()\n","data['sales_rolling_mean_30'] = data.groupby(['store_nbr', 'family'])['sales'].shift(1).rolling(window=30).mean()\n","\n","# After creating lag features, fill NaNs with appropriate values (e.g., 0 or rolling means)\n","lag_cols = [f'sales_lag_{lag}' for lag in range(1, 8)]\n","data[lag_cols] = data[lag_cols].fillna(0)\n","data['sales_rolling_mean_7'] = data['sales_rolling_mean_7'].fillna(0)\n","data['sales_rolling_mean_30'] = data['sales_rolling_mean_30'].fillna(0)\n"]},{"cell_type":"code","execution_count":17,"id":"e6f64f5c","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:23.933122Z","iopub.status.busy":"2024-09-23T03:00:23.932201Z","iopub.status.idle":"2024-09-23T03:00:25.648992Z","shell.execute_reply":"2024-09-23T03:00:25.647832Z"},"id":"V8zuUVj1C01-","papermill":{"duration":1.730964,"end_time":"2024-09-23T03:00:25.651811","exception":false,"start_time":"2024-09-23T03:00:23.920847","status":"completed"},"tags":[]},"outputs":[],"source":["# Identify categorical and continuous variables\n","categorical_features = ['store_nbr', 'family', 'city', 'state', 'type', 'cluster']\n","continuous_features = ['onpromotion', 'dcoilwtico', 'transactions', 'is_holiday',\n","                       'year', 'month', 'day', 'day_of_week', 'week_of_year',\n","                       'is_weekend', 'sales_rolling_mean_7', 'sales_rolling_mean_30'] + lag_cols\n","\n","# Fill any remaining missing values if necessary\n","data[categorical_features] = data[categorical_features].fillna('Unknown')\n","data[continuous_features] = data[continuous_features].fillna(0)\n"]},{"cell_type":"code","execution_count":18,"id":"61f1c68e","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:25.673634Z","iopub.status.busy":"2024-09-23T03:00:25.673194Z","iopub.status.idle":"2024-09-23T03:00:26.133418Z","shell.execute_reply":"2024-09-23T03:00:26.131621Z"},"id":"QIIvcvUyDGez","outputId":"cd4bac76-824f-413c-97fd-7996a439c420","papermill":{"duration":0.474324,"end_time":"2024-09-23T03:00:26.136134","exception":false,"start_time":"2024-09-23T03:00:25.66181","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Training Data Shape: (300089, 28)\n","Validation Data Shape: (28512, 6)\n"]}],"source":["# Use 10% of the training data to allow learning mdoel to run more quickly\n","train_data = data.sample(frac=0.1)\n","valid_data = test_data.copy()\n","\n","print(f\"Training Data Shape: {train_data.shape}\")\n","print(f\"Validation Data Shape: {valid_data.shape}\")\n"]},{"cell_type":"code","execution_count":19,"id":"227b397c","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:26.158452Z","iopub.status.busy":"2024-09-23T03:00:26.157996Z","iopub.status.idle":"2024-09-23T03:00:26.856785Z","shell.execute_reply":"2024-09-23T03:00:26.855628Z"},"id":"-tl9Hb5IDMra","papermill":{"duration":0.712772,"end_time":"2024-09-23T03:00:26.859445","exception":false,"start_time":"2024-09-23T03:00:26.146673","status":"completed"},"tags":[]},"outputs":[],"source":["# Define the target\n","dep_var = 'sales'\n","\n","# Define the list of categorical and continuous variables\n","cat_names = categorical_features\n","cont_names = continuous_features\n","\n","# Define preprocessing steps\n","procs = [Categorify, FillMissing, Normalize]\n","\n","# Create TabularPandas object\n","to = TabularPandas(train_data, procs, cat_names, cont_names, y_names=dep_var, splits=RandomSplitter(valid_pct=0.2)(range_of(train_data)))\n","\n","# Create DataLoaders\n","dls = to.dataloaders(bs=64)\n"]},{"cell_type":"code","execution_count":20,"id":"04af015f","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:26.881964Z","iopub.status.busy":"2024-09-23T03:00:26.881511Z","iopub.status.idle":"2024-09-23T03:00:26.931945Z","shell.execute_reply":"2024-09-23T03:00:26.93089Z"},"id":"hVvk_80XQj3-","outputId":"24f82454-ae91-4706-c0a6-784fcf01af75","papermill":{"duration":0.065019,"end_time":"2024-09-23T03:00:26.934967","exception":false,"start_time":"2024-09-23T03:00:26.869948","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["         store_nbr  family  city  state  type  cluster  onpromotion  \\\n","1224537         18       7    19     13     2       16    -0.216036   \n","748233          52      25    15     11     1       11    -0.216036   \n","1771445         13       6    11      4     3       15    -0.216036   \n","1332485         46      12    19     13     1       14    -0.048078   \n","2640870          8      13    19     13     4        8     5.410572   \n","\n","         dcoilwtico  transactions  is_holiday  ...  is_weekend  \\\n","1224537    0.300840     -0.287885    -0.40958  ...    -0.63292   \n","748233     1.332186     -0.490378    -0.40958  ...    -0.63292   \n","1771445   -0.890429     -0.941950    -0.40958  ...    -0.63292   \n","1332485   -0.818619      1.413756    -0.40958  ...    -0.63292   \n","2640870   -0.610953      1.070640    -0.40958  ...    -0.63292   \n","\n","         sales_rolling_mean_7  sales_rolling_mean_30  sales_lag_1  \\\n","1224537             -0.330536              -0.333561    -0.312558   \n","748233              -0.341520              -0.342640    -0.328996   \n","1771445             -0.195333              -0.190615    -0.246803   \n","1332485             -0.019654               1.044284    -0.103326   \n","2640870              4.757950               5.059125     3.438194   \n","\n","         sales_lag_2  sales_lag_3  sales_lag_4  sales_lag_5  sales_lag_6  \\\n","1224537    -0.319586    -0.322532    -0.314100    -0.315575    -0.312426   \n","748233     -0.320473    -0.326149    -0.324917    -0.323681    -0.326049   \n","1771445    -0.181225    -0.206787    -0.140126    -0.186771    -0.132592   \n","1332485     0.096378     0.140763    -0.047691    -0.093385    -0.051661   \n","2640870     4.087574     6.054303     6.826029     4.079054     3.122570   \n","\n","         sales_lag_7  \n","1224537    -0.307334  \n","748233     -0.327389  \n","1771445    -0.209794  \n","1332485    -0.076980  \n","2640870     4.080140  \n","\n","[5 rows x 25 columns]\n"]}],"source":["# View the normalized training data\n","normalized_df = to.train.xs  # xs contains the features (categorical and continuous)\n","print(normalized_df.head())  # Display the first few rows"]},{"cell_type":"code","execution_count":21,"id":"35212fff","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:26.957269Z","iopub.status.busy":"2024-09-23T03:00:26.956814Z","iopub.status.idle":"2024-09-23T03:00:26.96866Z","shell.execute_reply":"2024-09-23T03:00:26.96748Z"},"id":"qvxjoEMmZSFD","papermill":{"duration":0.025976,"end_time":"2024-09-23T03:00:26.971189","exception":false,"start_time":"2024-09-23T03:00:26.945213","status":"completed"},"tags":[]},"outputs":[],"source":["# Define RMSLE\n","from fastai.metrics import Metric\n","import torch\n","\n","class RMSLE(Metric):\n","    def __init__(self):\n","        self.reset()\n","\n","    def reset(self):\n","        self.sum = 0.0\n","        self.count = 0\n","\n","    def accumulate(self, learn):\n","        pred = torch.clamp(learn.pred, min=0)  # Clamp predictions to avoid negative values\n","        targ = learn.y\n","        self.sum += torch.sum((torch.log1p(pred) - torch.log1p(targ))**2).item()\n","        self.count += targ.shape[0]\n","\n","    @property\n","    def value(self):\n","        return (self.sum / self.count) ** 0.5 if self.count > 0 else None\n"]},{"cell_type":"code","execution_count":22,"id":"8fb2fc9c","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:26.993113Z","iopub.status.busy":"2024-09-23T03:00:26.992661Z","iopub.status.idle":"2024-09-23T03:00:27.040328Z","shell.execute_reply":"2024-09-23T03:00:27.038834Z"},"id":"oG7LMi5zHNyo","outputId":"3922dc3c-fa28-4cce-a1f9-8a6c8320d54d","papermill":{"duration":0.061655,"end_time":"2024-09-23T03:00:27.042998","exception":false,"start_time":"2024-09-23T03:00:26.981343","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["CPU times: user 3 µs, sys: 0 ns, total: 3 µs\n","Wall time: 7.87 µs\n"]}],"source":["%time\n","# Define the learner using Fastai's tabular_learner\n","# For this regression task where we predict continuous values, rmse is a good metric\n","learn = tabular_learner(dls, layers=[200, 100], metrics=RMSLE())\n"]},{"cell_type":"code","execution_count":23,"id":"2685dbe1","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:00:27.067268Z","iopub.status.busy":"2024-09-23T03:00:27.06579Z","iopub.status.idle":"2024-09-23T03:04:07.661425Z","shell.execute_reply":"2024-09-23T03:04:07.659927Z"},"id":"Hnym1dTmEg3A","outputId":"f9758e0b-af37-41a1-d66c-8f4857f10bb3","papermill":{"duration":220.610325,"end_time":"2024-09-23T03:04:07.663996","exception":false,"start_time":"2024-09-23T03:00:27.053671","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n","        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>rmsle</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>135703.843750</td>\n","      <td>107754.390625</td>\n","      <td>1.574400</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>97024.429688</td>\n","      <td>90313.648438</td>\n","      <td>2.651472</td>\n","      <td>00:43</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>102825.093750</td>\n","      <td>877093.312500</td>\n","      <td>2.845492</td>\n","      <td>00:43</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>100677.585938</td>\n","      <td>1527390.125000</td>\n","      <td>2.428479</td>\n","      <td>00:43</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>69422.648438</td>\n","      <td>207102.625000</td>\n","      <td>2.560798</td>\n","      <td>00:44</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["CPU times: user 7min 2s, sys: 2.11 s, total: 7min 4s\n","Wall time: 3min 40s\n"]}],"source":["%%time\n","# Train the model for 5 epochs with a learning rate of 2e-2\n","learn.fit_one_cycle(5, 2e-2)\n"]},{"cell_type":"code","execution_count":24,"id":"f78ec69c","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:04:07.687085Z","iopub.status.busy":"2024-09-23T03:04:07.686657Z","iopub.status.idle":"2024-09-23T03:04:52.206116Z","shell.execute_reply":"2024-09-23T03:04:52.204636Z"},"id":"NjYzXKN-UfuN","outputId":"8e57f8a1-6652-4b9f-c80a-bfdbeac060d7","papermill":{"duration":44.533924,"end_time":"2024-09-23T03:04:52.208533","exception":false,"start_time":"2024-09-23T03:04:07.674609","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n","        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>rmsle</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>77605.109375</td>\n","      <td>77565.351562</td>\n","      <td>2.714780</td>\n","      <td>00:44</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["CPU times: user 1min 25s, sys: 433 ms, total: 1min 25s\n","Wall time: 44.5 s\n"]}],"source":["%%time\n","# Train the model for 1 epoch for fine tuning\n","learn.fit_one_cycle(1, 3e-2)"]},{"cell_type":"code","execution_count":25,"id":"d6097341","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:04:52.23287Z","iopub.status.busy":"2024-09-23T03:04:52.232412Z","iopub.status.idle":"2024-09-23T03:04:52.237345Z","shell.execute_reply":"2024-09-23T03:04:52.236158Z"},"id":"CCCdFwhxV5WX","outputId":"8d34d1d7-9d2e-4115-bd4d-c1d941ecfb5a","papermill":{"duration":0.019609,"end_time":"2024-09-23T03:04:52.239718","exception":false,"start_time":"2024-09-23T03:04:52.220109","status":"completed"},"tags":[]},"outputs":[],"source":["#%%time\n","# Train the model for 1 epoch for fine tuning\n","#learn.fit_one_cycle(1, 1e-3)"]},{"cell_type":"code","execution_count":26,"id":"ad68a663","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:04:52.26433Z","iopub.status.busy":"2024-09-23T03:04:52.263813Z","iopub.status.idle":"2024-09-23T03:04:52.282564Z","shell.execute_reply":"2024-09-23T03:04:52.280828Z"},"id":"bg4v9g9hXJnV","outputId":"e2675486-cf3a-431e-ed86-1e924f11e92b","papermill":{"duration":0.034473,"end_time":"2024-09-23T03:04:52.28516","exception":false,"start_time":"2024-09-23T03:04:52.250687","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Adding missing column: city\n","Adding missing column: state\n","Adding missing column: type\n","Adding missing column: cluster\n","Adding missing column: dcoilwtico\n","Adding missing column: transactions\n","Adding missing column: is_holiday\n","Adding missing column: year\n","Adding missing column: month\n","Adding missing column: day\n","Adding missing column: day_of_week\n","Adding missing column: week_of_year\n","Adding missing column: is_weekend\n","Adding missing column: sales_lag_1\n","Adding missing column: sales_lag_2\n","Adding missing column: sales_lag_3\n","Adding missing column: sales_lag_4\n","Adding missing column: sales_lag_5\n","Adding missing column: sales_lag_6\n","Adding missing column: sales_lag_7\n","Adding missing column: sales_rolling_mean_7\n","Adding missing column: sales_rolling_mean_30\n"]}],"source":["# Add missing columns to test data set\n","for col in train_data.columns:\n","    if col not in test_data.columns:\n","        print(f\"Adding missing column: {col}\")\n","        test_data[col] = 0  # Or some default value"]},{"cell_type":"code","execution_count":27,"id":"1586c1c7","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:04:52.310913Z","iopub.status.busy":"2024-09-23T03:04:52.310444Z","iopub.status.idle":"2024-09-23T03:04:55.649621Z","shell.execute_reply":"2024-09-23T03:04:55.64849Z"},"id":"8w4oMEgoFPyB","outputId":"4c68df3c-d336-4d65-be8c-d2f6beb5f658","papermill":{"duration":3.35491,"end_time":"2024-09-23T03:04:55.652547","exception":false,"start_time":"2024-09-23T03:04:52.297637","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["\n","<style>\n","    /* Turns off some styling */\n","    progress {\n","        /* gets rid of default border in Firefox and Opera. */\n","        border: none;\n","        /* Needs to be in here for Safari polyfill so background images work as expected. */\n","        background-size: auto;\n","    }\n","    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n","        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n","    }\n","    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","        background: #F44336;\n","    }\n","</style>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":[],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"}],"source":["# Prepare the test data and ensure all preprocessing steps are applied\n","test_dl = learn.dls.test_dl(test_data)\n","\n","# Make predictions on the test data\n","test_preds, _ = learn.get_preds(dl=test_dl)\n","\n","# Prepare submission file\n","test_data['sales'] = test_preds.flatten().numpy()"]},{"cell_type":"code","execution_count":28,"id":"fe4b8fb0","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:04:55.677245Z","iopub.status.busy":"2024-09-23T03:04:55.676819Z","iopub.status.idle":"2024-09-23T03:04:55.682632Z","shell.execute_reply":"2024-09-23T03:04:55.681166Z"},"id":"zCUEpWr-Zgfa","outputId":"cf7442c5-70c7-4d45-fad9-c9e7e907c92d","papermill":{"duration":0.021056,"end_time":"2024-09-23T03:04:55.685147","exception":false,"start_time":"2024-09-23T03:04:55.664091","status":"completed"},"tags":[]},"outputs":[],"source":["# Create submission file\n","# submission = test_data[['id', 'sales']]\n","# submission.to_csv('submission.csv', index=False)\n","# print(\"Submission file 'submission.csv' created successfully.\")\n"]},{"cell_type":"code","execution_count":29,"id":"68a804e4","metadata":{"execution":{"iopub.execute_input":"2024-09-23T03:04:55.709841Z","iopub.status.busy":"2024-09-23T03:04:55.709377Z","iopub.status.idle":"2024-09-23T03:04:55.714791Z","shell.execute_reply":"2024-09-23T03:04:55.713604Z"},"id":"K3ELMU2kZ-KP","outputId":"d268aa7b-032d-4716-d372-feb0c4310e4d","papermill":{"duration":0.020844,"end_time":"2024-09-23T03:04:55.717321","exception":false,"start_time":"2024-09-23T03:04:55.696477","status":"completed"},"tags":[]},"outputs":[],"source":["# import os\n","\n","# # Print the current working directory\n","# print(os.getcwd())"]}],"metadata":{"colab":{"provenance":[]},"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5750371,"sourceId":9458968,"sourceType":"datasetVersion"},{"sourceId":197857674,"sourceType":"kernelVersion"}],"dockerImageVersionId":30761,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":303.850878,"end_time":"2024-09-23T03:04:57.054842","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-09-23T02:59:53.203964","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}